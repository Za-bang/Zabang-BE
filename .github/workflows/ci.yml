name: Continuous Integration

on:
  push:
    branches: ["main"]
    paths-ignore:
      - 'xinfra/eks/**'

permissions:
      id-token: write
      contents: read
      
env:
  REPOSITORY: ${{ secrets.REPOSITORY }}
  IMAGE_TAG: :${{ github.ref_name }}-${{ github.sha }}
  REGISTRY_USERNAME: ${{ github.actor }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE: ${{ secrets.AWS_ROLE }}

jobs:
  Build:
    name: Build & Delivery
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{secrets.TOKEN_GITHUB}}
          submodules: true

      - name: Git Submodule Update
        run: |
          git submodule update --remote --recursive
      
      - name: Set up Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
        
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
        
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Build with Gradle
        id: buildWithGradle
        run: ./gradlew clean build -x test
        shell: bash


      - name: lowercase the image tag & repository
        run: |
          echo "REPOSITORY=$(echo $REPOSITORY | tr '[:upper:]' '[:lower:]')" >> ${GITHUB_ENV}
          echo "IMAGE_TAG=$(echo $IMAGE_TAG | tr '[:upper:]' '[:lower:]')" >> ${GITHUB_ENV}

      - name: Set Spring Image Environment Variable
        run: |
          echo "PROD_IMAGE=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY }}${{ env.IMAGE_TAG }}-prod" >> ${GITHUB_ENV}
          echo "DEV_IMAGE=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY }}${{ env.IMAGE_TAG }}-dev" >> ${GITHUB_ENV}
          echo "EU_IMAGE=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.REPOSITORY }}${{ env.IMAGE_TAG }}-eu" >> ${GITHUB_ENV}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{env.AWS_REGION}}
          role-to-assume: ${{ env.AWS_ROLE }}
          role-session-name: GitHubActionsSession
    
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

 
      - name: Build Prod Image
        run: docker build --no-cache -t ${{ env.PROD_IMAGE }} -f ./xinfra/docker/DockerfileProd .

      - name: Build Dev Image
        run: docker build --no-cache -t ${{ env.DEV_IMAGE }} -f ./xinfra/docker/DockerfileDev .

      - name: Build EU Image
        run: docker build --no-cache -t ${{ env.EU_IMAGE }} -f ./xinfra/docker/DockerfileEu .

      - name: Push to ECR
        run: |
          docker push ${{ env.PROD_IMAGE }}
          docker push ${{ env.DEV_IMAGE }}
          docker push ${{ env.EU_IMAGE }}

      - name: Update Kustomize with new images
        run: |
          sed -i "s|image:.*-prod:latest|image: ${{ env.PROD_IMAGE }}|g; s|image:.*-prod|image: ${{ env.PROD_IMAGE }}|g" ./xinfra/eks/overlays/prod/patch.yaml
          sed -i "s|image:.*-dev:latest|image: ${{ env.DEV_IMAGE }}|g; s|image:.*-dev|image: ${{ env.DEV_IMAGE }}|g" ./xinfra/eks/overlays/dev/patch.yaml
    

      - name: Commit and Push Changes
        run: |
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git add ./xinfra/eks/overlays/prod/patch.yaml ./xinfra/eks/overlays/dev/patch.yaml
          git commit -m "Update kustomization files with new image tags"
          git push origin ${{ github.ref }}
